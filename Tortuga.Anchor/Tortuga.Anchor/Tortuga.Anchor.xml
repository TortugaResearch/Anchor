<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tortuga.Anchor</name>
    </assembly>
    <members>
        <member name="T:Tortuga.Anchor.Collections.Dictionary`3">
            <summary>
            A dictionary that uses a compound key.
            </summary>
            <typeparam name="TKey1">The type of the first key.</typeparam>
            <typeparam name="TKey2">The type of the second key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Collections.Generic.IDictionary{System.ValueTuple{`0,`1},`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="dictionary">The dictionary to copy.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Collections.Generic.Dictionary{System.ValueTuple{`0,`1},`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="dictionary">The dictionary to copy.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Collections.Generic.IDictionary{System.ValueTuple{`0,`1},`2},System.Collections.Generic.IEqualityComparer{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="dictionary">The dictionary to copy.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Collections.Dictionary`3" /> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Item(System.ValueTuple{`0,`1})">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="key">The key.</param>
            <returns>TValue.</returns>
        </member>
        <member name="P:Tortuga.Anchor.Collections.Dictionary`3.Item(`0,`1)">
             <summary>
             Gets or sets the value with the specified keys.
             </summary>
             <value>
            
             </value>
             <param name="key1">The first key.</param>
             <param name="key2">The second key.</param>
             <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Add(System.ValueTuple{`0,`1},`2)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Add(`0,`1,`2)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key1">The first key.</param>
            <param name="key2">The second key.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Add(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`1},`2})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.ContainsKey(System.ValueTuple{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.ContainsKey(`0,`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key1">The first key.</param>
            <param name="key2">The second key.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.CopyTo(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`1},`2}[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Remove(System.ValueTuple{`0,`1})">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <param name="key">
            The key of the element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Remove(`0,`1)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key1">The first key.</param>
            <param name="key2">The second key.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key1" />+<paramref name="key2" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.Remove(System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`1},`2})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">
            The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.TryGetValue(System.ValueTuple{`0,`1},`2@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.Dictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key1">The first key.</param>
            <param name="key2">The second key.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns> true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="T:Tortuga.Anchor.Collections.ObservableCollectionExtended`1">
            <summary>
            This is an ObservableCollection with a read-only wrapper and support for weak events.
            This will use weak events to listen to objects implementing INotifyPropertyChangedWeak.
            This will use normal events to listen to objects implementing INotifyPropertyChanged.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="F:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.m_ListeningToItemEvents">
            <summary>
            When someone attaches to the ItemPropertyChanged event this is set to true and we start listening for change notifications.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.#ctor">
            <summary>
            Initializes a new instance of the ObservableCollectionExtended class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the ObservableCollectionExtended class that contains elements copied from the specified list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ObservableCollectionExtended class that contains elements copied from the specified collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ItemAdded">
            <summary>
            This type safe event fires after an item is added to the collection no matter how it is added.
            </summary>
            <remarks>Triggered by InsertItem and SetItem</remarks>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ItemPropertyChanged">
            <summary>
            Use this event to listen for changes to properties on items contained by this collection without having to explicitly attach an event handler to each item.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ItemRemoved">
            <summary>
            This type safe event fires after an item is removed from the collection no matter how it is removed.
            </summary>
            <remarks>Triggered by SetItem, RemoveItem, and ClearItems</remarks>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.PropertyChanged">
            <summary>
            This just exposes the INotifyPropertyChanged.PropertyChanged from the base class so you don't have to cast to get to it.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ReadOnlyWrapper">
            <summary>
            Returns a read-only wrapper around this collection.
            </summary>
            <remarks>
            If sub classing this class then it may be useful to shadow ReadOnlyWrapper method
            with one that returns a subclass of ReadOnlyObservableCollectionExtended.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.AddHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Adds a weak event handler
            </summary>
            <param name="eventHandler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">eventHandler</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.AddHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Adds a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.AddHandler(Tortuga.Anchor.Eventing.IListener{Tortuga.Anchor.Eventing.RelayedEventArgs{System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Adds a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of values to this collection
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match"> The System.Predicate`1 delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Removes a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Removes a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{Tortuga.Anchor.Eventing.RelayedEventArgs{System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Removes a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
            <remarks>Do NOT invoke this method directly. This may be overridden to provide additional validation before an item is added to the collection.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)">
            <summary>
            This fires after an item is removed from the collection no matter how it is removed.
            </summary>
            <param name="item"></param>
            <remarks>Triggered by SetItem, RemoveItem, and ClearItems.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)">
            <summary>
            This fires after an item is removed from the collection no matter how it is removed.
            </summary>
            <param name="item"></param>
            <remarks>Triggered by SetItem, RemoveItem, and ClearItems.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> event with the provided arguments.
            </summary>
            <param name="propertyName">
            Property that is being changed.
            </param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than zero -or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
            <remarks>Do NOT invoke this method directly. This may be overridden to provide additional validation before an item is removed to the collection.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <remarks>Do NOT invoke this method directly. This may be overridden to provide additional validation before an item is added to the collection.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ObservableCollectionExtended`1.ListenToEvents">
            <summary>
            This enables the ItemPropertyChanged events.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1">
            <summary>
            A ReadOnlyObservableCollection that includes the functionality from ExtendedObservableCollection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.#ctor(Tortuga.Anchor.Collections.ObservableCollectionExtended{`0})">
            <summary>
            Initializes a new instance of the ReadOnlyObservableCollectionExtended
            class that serves as a wrapper around the specified System.Collections.ObjectModel.ObservableCollection.
            </summary>
            <param name="list">
            The System.Collections.ObjectModel.ObservableCollection with which to
            create this instance of the System.Collections.ObjectModel.ReadOnlyObservableCollection
            class.
            </param>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.CollectionChanged">
            <summary>
            Occurs when an item is added or removed.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.ItemPropertyChanged">
            <summary>
            Use this event to listen for changes to properties on items contained by this collection without having to explicitly attach an event handler to each item.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.SourceList">
            <summary>
            The list being wrapped.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.AddHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Adds a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.AddHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Adds a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Removes a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Removes a weak event handler
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged
            event using the provided arguments.
            </summary>
            <param name="args">Arguments of the event being raised.</param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged
            event using the provided arguments.
            </summary>
            <param name="propertyName">Arguments of the event being raised.</param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged
            event using the provided arguments.
            </summary>
            <param name="args">Arguments of the event being raised.</param>
        </member>
        <member name="M:Tortuga.Anchor.Collections.ReadOnlyObservableCollectionExtended`1.OnSourcePropertyChanged(System.String)">
            <summary>
            This method is called when a property on the source collection changes. You may use this to forward property change notifications for properties on this class that wrap the source collection.
            </summary>
            <remarks>
            This will not forward the properties "Count" and "Item[]".
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Collections.WeakReferenceCollection`1">
            <summary>
            This represents a collection of weak references.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="P:Tortuga.Anchor.Collections.WeakReferenceCollection`1.Count">
            <summary>
            Returns the count of live objects.
            </summary>
            <remarks>For a more accurate count call CleanUp before reading this property.</remarks>
        </member>
        <member name="P:Tortuga.Anchor.Collections.WeakReferenceCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Always returns true
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.Add(`0)">
            <summary>
            Adds a weak reference to the indicated item
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of values to this collection
            </summary>
            <param name="list">The list.</param>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentException">list</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.CleanUp">
            <summary>
            Removes the dead references from the collection
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.Contains(`0)">
            <summary>
            Returns true if the item is found in the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies a snapshot of the collection to an array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array - array is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex
            or
            arrayIndex
            </exception>
            <exception cref="T:System.ArgumentException">array</exception>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator containing references that were live at the time this is called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Collections.WeakReferenceCollection`1.Remove(`0)">
            <summary>
            Removes the indicated item from the array
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>Returns true if the collection previously contained the item</returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <remarks>If an item appears more than once only the first instance will be removed.</remarks>
        </member>
        <member name="T:Tortuga.Anchor.CollectionUtilities">
            <summary>
            Utility methods for collection classes.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.List{``0})">
            <summary>
            Adds a list of values into the target collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="list"></param>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of values into the target collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="list"></param>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds a list of values into the target collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="list"></param>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Unwraps a list of Tasks and adds their results to the target collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target collection to be added to.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the enumeration as an IList. If it isn't already an IList, it makes it into one
            so that you can safely enumeration the list multiple times.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source. If the source is null, the result will be null.</param>
            <returns>Returns an IList.</returns>
            <remarks>
            This is primarily meant to be used with poorly designed interfaces that return lists
            disguised as IEnumerable.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AsReadOnlyCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Casts an IList&lt;T&gt; into a IReadOnlyList&lt;T&gt;. If the cast fails, the list is
            wrapped in an adapter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>IReadOnlyList&lt;T&gt;.</returns>
            <remarks>This is meant to be used for legacy codebases that predate IReadOnlyCollection&lt;T&gt;.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.AsReadOnlyList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Casts an IList&lt;T&gt; into a IReadOnlyList&lt;T&gt;. If the cast fails, the list is
            wrapped in a ReadOnlyCollection&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>IReadOnlyList&lt;T&gt;.</returns>
            <remarks>This is meant to be used for legacy codebases that predate IReadOnlyList&lt;T&gt;.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Concatenates an item onto the emd of an enumeration.
            </summary>
            <typeparam name="TSource">The type of enumerable</typeparam>
            <param name="list">The source to be enumerated.</param>
            <param name="item">The item to be appended to the enumeration.</param>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the concatenated
            elements of the two input sequences.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.GetKeys``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1})">
            <summary>
            Gets the keys as a readonly collection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
            <remarks>This is just a cast. It accounts for an API bug in ConcurrentDictionary.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.GetValues``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1})">
            <summary>
            Gets the values as a readonly collection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
            <remarks>This is just a cast. It accounts for an API bug in ConcurrentDictionary.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts a list of values into the target collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="startingIndex"></param>
            <param name="list"></param>
            <remarks>This isn't as fast as a real InsertRange, it just adds one item at a time.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Removes count items from the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="startingIndex"></param>
            <param name="count"></param>
            <remarks>
            This isn't as fast as a real RemoveRange, it just removes one item at a time.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Performs an in-place sort of the specified list using it's IComparable&lt;T&gt; interface.
            </summary>
            <typeparam name="T">Type of item in the list</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">list or comparer</exception>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs an in-place sort of the specified list.
            </summary>
            <typeparam name="T">Type of item in the list</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use when sorting.</param>
            <exception cref="T:System.ArgumentNullException">list or comparer</exception>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs an in-place sort of the specified list.
            </summary>
            <typeparam name="T">Type of item in the list</typeparam>
            <param name="list">The list to sort.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer to use when sorting.</param>
            <exception cref="T:System.ArgumentNullException">list or comparer</exception>
        </member>
        <member name="M:Tortuga.Anchor.CollectionUtilities.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Performs an in-place sort of the specified list.
            </summary>
            <typeparam name="T">Type of item in the list</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison function to use when sorting.</param>
            <exception cref="T:System.ArgumentNullException">list or comparer</exception>
        </member>
        <member name="F:Tortuga.Anchor.CollectionUtilities.s_IntrospectiveSortSizeThreshold">
            <summary>
            This is the threshold where Introspective sort switches to Insertion sort. Empirically,
            16 seems to speed up most cases without slowing down others, at least for integers. Large
            value types may benefit from a smaller number.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.ComponentModel.IDetailedPropertyChangeTracking">
            <summary>
            This interface adds the ability to retrieve the previous values.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IDetailedPropertyChangeTracking.GetPreviousValue(System.String)">
            <summary>
            Gets the previous value for the indicated property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Tortuga.Anchor.ComponentModel.INotifyCollectionChanged`1">
            <summary>
            This is a type-safe version of INotifyCollectionChanged
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Tortuga.Anchor.ComponentModel.INotifyCollectionChanged`1.ItemAdded">
            <summary>
            This type safe event fires after an item is added to the collection no matter how it is added.
            </summary>
            <remarks>Triggered by InsertItem and SetItem</remarks>
        </member>
        <member name="E:Tortuga.Anchor.ComponentModel.INotifyCollectionChanged`1.ItemRemoved">
            <summary>
            This type safe event fires after an item is removed from the collection no matter how it is removed.
            </summary>
            <remarks>Triggered by SetItem, RemoveItem, and ClearItems</remarks>
        </member>
        <member name="T:Tortuga.Anchor.ComponentModel.IPropertyChangeTracking">
            <summary>
            This interface is used to determine which properties have changed. 
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IPropertyChangeTracking.ChangedProperties">
            <summary>
            List of changed properties.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.ComponentModel.ItemEventArgs`1">
            <summary>
            This is used for ItemAdded and ItemRemoved events to indicate which item was affected.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.ItemEventArgs`1.#ctor(`0)">
            <summary>
            Create a new instance of ItemEventArgs with the indicated item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Tortuga.Anchor.ComponentModel.ItemEventArgs`1.Item">
            <summary>
            Item that was added or removed
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.ComponentModel.IValidatable">
            <summary>
            This interface exposes strongly typed validation information.
            </summary>
            <remarks>While this interface is easier to work with than IDataErrorInfo, classes should still implement IDataErrorInfo so that they work with UI components.</remarks>
        </member>
        <member name="E:Tortuga.Anchor.ComponentModel.IValidatable.ErrorsChanged">
            <summary>
            Raised when the errors collection has changed.
            </summary>
            <remarks>
            This may be fired even when no actual change has occurred.
            </remarks>
        </member>
        <member name="P:Tortuga.Anchor.ComponentModel.IValidatable.HasErrors">
            <summary>
            Returns True if there are any errors.
            </summary>
            <value>
              <c>true</c> if there are errors; otherwise, <c>false</c>.
            </value>
            <remarks>
            Call Validate() to refresh this property
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IValidatable.ClearErrors">
            <summary>
            Clears the error collections and the HasErrors property
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IValidatable.GetAllErrors">
            <summary>
            Returns a collection of all errors (object and property level).
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IValidatable.GetErrors">
            <summary>
            Returns a collection of object-level errors.
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IValidatable.GetErrors(System.String)">
            <summary>
            Returns a collection of property-level errors.
            </summary>
            <param name="propertyName">Null or String.Empty will return the object-level errors</param>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.ComponentModel.IValidatable.Validate">
            <summary>
            This forces the object to be completely revalidated.
            </summary>
            <returns>
            True if the object has no errors
            </returns>
        </member>
        <member name="T:Tortuga.Anchor.DataAnnotations.ValidationResultCollection">
            <summary>
            Collection of validation results
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.DataAnnotations.ValidationResultCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.DataAnnotations.ValidationResultCollection"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.DataAnnotations.ValidationResultCollection.#ctor(System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.DataAnnotations.ValidationResultCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Tortuga.Anchor.DataAnnotations.ValidationResultCollection.Add(System.String,System.String[])">
            <summary>
            Adds a new validation result to the collection
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="memberNames">The member names.</param>
            <returns>ValidationResult.</returns>
            <exception cref="T:System.ArgumentException">errorMessage</exception>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.CollectionChangedEventManager">
            <summary>
            This is used to attach weak event handlers to the indicated source.
            </summary>
            <remarks>
            If a class encapsulates this then it should also implement INotifyCollectionChangedWeak.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.CollectionChangedEventManager.#ctor(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Creates a new CollectionChangedEventManager.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.CollectionChangedEventManager.AttachToEvent">
            <summary>
            The implementation of this event must attach the event source to the EventFired method.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.CollectionChangedEventManager.DetachFromEvent">
            <summary>
            The implementation of this event must detach the event source to the EventFired method.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.EventManager`1">
            <summary>
            This is used to attach weak event handlers to the indicated source.
            </summary>
            <typeparam name="T">The type of event being listened to.</typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.EventManager`1.AddHandler(Tortuga.Anchor.Eventing.IListener{`0})">
            <summary>
            Adds a weak event handler.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">eventHandler</exception>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.EventManager`1.RemoveHandler(Tortuga.Anchor.Eventing.IListener{`0})">
            <summary>
            Removes a weak event handler.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">eventHandler</exception>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.EventManager`1.AttachToEvent">
            <summary>
            The implementation of this event must attach the event source to the EventFired method.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.EventManager`1.DetachFromEvent">
            <summary>
            The implementation of this event must detach the event source to the EventFired method.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.EventManager`1.EventFired(System.Object,`0)">
            <summary>
            This dispatches the event to all of the listeners
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.IListener`1">
            <summary>
            Used for weak event callbacks
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.IListener`1.Invoke(System.Object,`0)">
            <summary>
            This is the callback on the listener
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.INotifyCollectionChangedWeak">
            <summary>
            This interface allows attaching and removing weak event handlers that listen for CollectionChanged events
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyCollectionChangedWeak.AddHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Attach a weak event handler to this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyCollectionChangedWeak.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Remove a weak event handler from this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.INotifyItemPropertyChanged">
            <summary>
            Indicates that property change notifications on child objects are relayed by this class
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Eventing.INotifyItemPropertyChanged.ItemPropertyChanged">
            <summary>
            Use this event to listen for changes to properties on items contained by this object without having to explicitly attach an event handler to each item.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.INotifyItemPropertyChangedWeak">
            <summary>
            This interface allows attaching and removing weak event handlers that listen for CollectionChanged events
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyItemPropertyChangedWeak.AddHandler(Tortuga.Anchor.Eventing.IListener{Tortuga.Anchor.Eventing.RelayedEventArgs{System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Attach a weak event handler to this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyItemPropertyChangedWeak.RemoveHandler(Tortuga.Anchor.Eventing.IListener{Tortuga.Anchor.Eventing.RelayedEventArgs{System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Remove a weak event handler from this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.INotifyPropertyChangedWeak">
            <summary>
            This interface allows attaching and removing weak event handlers that listen for CollectionChanged events
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyPropertyChangedWeak.AddHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Attach a weak event handler to this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.INotifyPropertyChangedWeak.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Remove a weak event handler from this object
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.ItemPropertyChangedEventManager">
            <summary>
            This is used to attach weak event handlers to the indicated source.
            </summary>
            <remarks>
            If a class encapsulates this then it should also implement INotifyItemPropertyChangedWeak.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.ItemPropertyChangedEventManager.#ctor(Tortuga.Anchor.Eventing.INotifyItemPropertyChanged)">
            <summary>
            Creates a new CollectionChangedEventManager.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.ItemPropertyChangedEventManager.AttachToEvent">
            <summary>
            The implementation of this event must attach the event source to the EventFired method.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.ItemPropertyChangedEventManager.DetachFromEvent">
            <summary>
            The implementation of this event must detach the event source to the EventFired method.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.Listener`1">
            <summary>
            The object that is referenced by the eventHandler must keep a reference to this class.
            Implements the <see cref="T:Tortuga.Anchor.Eventing.IListener`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Tortuga.Anchor.Eventing.IListener`1" />
        </member>
        <member name="M:Tortuga.Anchor.Eventing.Listener`1.#ctor(System.Action{System.Object,`0})">
            <summary>
            The object that is referenced by the eventHandler must keep a reference to this class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">eventHandler</exception>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.Listener`1.Invoke(System.Object,`0)">
            <summary>
            Invokes the associated delegate
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.PropertyChangedEventManager">
            <summary>
            This is used to attach weak event handlers to the indicated source.
            </summary>
            <remarks>
            If a class encapsulates this then it should also implement INotifyPropertyChangedWeak.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.PropertyChangedEventManager.#ctor(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Creates a new CollectionChangedEventManager.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.PropertyChangedEventManager.AttachToEvent">
            <summary>
            The implementation of this event must attach the event source to the EventFired method.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.PropertyChangedEventManager.DetachFromEvent">
            <summary>
            The implementation of this event must detach the event source to the EventFired method.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.RelayedEventArgs">
            <summary>
            A relayed event wraps a sender/event args pair so that it can be forwarded by another class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Eventing.RelayedEventArgs.Create``1(System.Object,``0)">
            <summary>
            Create a new relayed event from an existing event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalSender">The original sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <returns>RelayedEventArgs&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">eventArgs</exception>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.RelayedEventArgs`1">
            <summary>
            A relayed event wraps a sender/event args pair so that it can be forwarded by another class.
            Implements the <see cref="P:Tortuga.Anchor.Eventing.RelayedEventArgs`1.EventArgs" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="P:Tortuga.Anchor.Eventing.RelayedEventArgs`1.EventArgs" />
        </member>
        <member name="M:Tortuga.Anchor.Eventing.RelayedEventArgs`1.#ctor(System.Object,`0)">
            <summary>
            Create a new relayed event from an existing event
            </summary>
            <param name="originalSender">The original sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <exception cref="T:System.ArgumentNullException">eventArgs</exception>
        </member>
        <member name="P:Tortuga.Anchor.Eventing.RelayedEventArgs`1.EventArgs">
            <summary>
            The wrapped event args
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Eventing.RelayedEventArgs`1.OriginalSender">
            <summary>
            The object that raised the original event
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Eventing.RelayedEventHandler`1">
            <summary>
            This represents a relayed event. That is, an event that has both an immediate and and original source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Tortuga.Anchor.LockUtilities">
            <summary>
            Helper methods for working with various types of locks.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.LockUtilities.Acquire(System.Threading.SemaphoreSlim)">
            <summary>
            Acquires a semaphore as a blocking operation. When this is disposed, the semaphore will be released.
            </summary>
            <param name="semaphore">The semaphore.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:Tortuga.Anchor.LockUtilities.AcquireAsync(System.Threading.SemaphoreSlim)">
            <summary>
            Acquires a semaphore as an asynchronous operation. When this is disposed, the semaphore will be released.
            </summary>
            <param name="semaphore">The semaphore.</param>
            <returns>Task&lt;IDisposable&gt;.</returns>
        </member>
        <member name="M:Tortuga.Anchor.LockUtilities.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Acquires a read lock on the indicated ReaderWriterLockSlim.
            </summary>
            <param name="lock">The lock to be acquired.</param>
            <remarks>To not use this in an environment where Thread Abort exceptions are possible, as it may lead to dead locks.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.LockUtilities.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Acquires a write lock on the indicated ReaderWriterLockSlim.
            </summary>
            <param name="lock">The lock to be acquired.</param>
            <remarks>To not use this in an environment where Thread Abort exceptions are possible, as it may lead to dead locks.</remarks>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.ClassMetadata">
            <summary>
            Cached Metadata about the indicated type.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.ColumnsFor">
            <summary>
            Gets the database columns for this class.
            </summary>
            <remarks>This honors the Column, NotMapped, and Decompose attributes.</remarks>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.Constructors">
            <summary>
            Properties on the indicated class
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.CSharpFullName">
            <summary>
            Gets the fully quantified name in C# format.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.FSharpFullName">
            <summary>
            Gets the fully quantified name in F# format.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.IsNullable">
            <summary>
            Gets a value indicating whether this instance is nullable.
            </summary>
            <value>
              True is the type is a reference type, interface, or a nullable value type.
            </value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.IsNullableEx">
            <summary>
            Gets a value indicating whether this instance is nullable. This supports C# 8.0's nullable reference types.
            </summary>
            <value>
              True is the type is a reference type, interface, or a nullable value type.
            </value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.MappedSchemaName">
            <summary>
            Schema referred to by TableAttribute.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.MappedTableName">
            <summary>
            Table referred to by TableAttribute.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.Properties">
            <summary>
            Properties on the indicated class
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.TypeInfo">
            <summary>
            Gets the underlying type.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ClassMetadata.VisualBasicFullName">
            <summary>
            Gets the fully quantified name in VB format.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ClassMetadata.MakeNonNullable">
            <summary>
            Returns the non-nullable representation of the underlying type.
            </summary>
            <returns>If a nullable value type, returns the non-nullable type. Otherwise echoes the type.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ClassMetadata.MakeNullable">
            <summary>
            Returns the nullable representation of the underlying type.
            </summary>
            <returns>If a non-nullable value type, returns the nullable type. Otherwise echoes the type.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ClassMetadata.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.ConstructorMetadata">
            <summary>
            Class ConstructorMetadata.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadata.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Metadata.ConstructorMetadata"/> class.
            </summary>
            <param name="constructorInfo">The constructor information.</param>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadata.ConstructorInfo">
            <summary>
            Gets the constructor information.
            </summary>
            <value>The constructor information.</value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadata.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
            <value>The parameter names.</value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadata.Signature">
            <summary>
            Gets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.ConstructorMetadataCollection">
            <summary>
            Class ConstructorMetadataCollection.
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.HasDefaultConstructor">
            <summary>
            Gets a value indicating whether this instance has a default constructor.
            </summary>
            <value><c>true</c> if this instance has a default constructor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Contains(Tortuga.Anchor.Metadata.ConstructorMetadata)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Contains(System.Collections.Generic.IReadOnlyList{System.Type})">
            <summary>
            Determines whether [contains] [the specified signature].
            </summary>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if [contains] [the specified signature]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Contains(System.Type[])">
            <summary>
            Determines whether [contains] [the specified signature].
            </summary>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if [contains] [the specified signature]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.CopyTo(Tortuga.Anchor.Metadata.ConstructorMetadata[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Find(System.Collections.Generic.IReadOnlyList{System.Type})">
            <summary>
            Attempts to find the specified constructor. Returns null if no match was found.
            </summary>
            <param name="signature">The signature.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.Find(System.Type[])">
            <summary>
            Attempts to find the specified constructor. Returns null if no match was found.
            </summary>
            <param name="signature">The signature.</param>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.ConstructorMetadataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.MetadataCache">
            <summary>
            Cache's metadata fetched via reflection.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.MetadataCache.GetMetadata``1">
            <summary>
            Gets the metadata for the indicated type.
            </summary>
            <typeparam name="T">The type of interest</typeparam>
            <returns>A thread-safe copy of the class's metadata</returns>
            <remarks>Actually fetching the metadata may require taking a lock. Therefore it is advisable to locally cache the metadata as well.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.MetadataCache.GetMetadata(System.Type)">
            <summary>
            Gets the metadata for the indicated type.
            </summary>
            <param name="type">The type of interest</param>
            <returns>A thread-safe copy of the class's metadata</returns>
            <remarks>Actually fetching the metadata may require taking a lock. Therefore it is advisable to locally cache the metadata as well.</remarks>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.PropertyMetadata">
            <summary>
            This is a cache of metadata about a specific property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.AffectsCalculatedFields">
            <summary>
            Returns true of this property needs to trigger updates to calculated fields
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.CalculatedFields">
            <summary>
            This returns a list of calculated fields that need to be updated when this property is changed.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.CanRead">
            <summary>
            Returns true if there is a public getter and it is not an indexed property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.CanReadIndexed">
            <summary>
            Returns true if there is a public getter and it is an indexed property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.CanWrite">
            <summary>
            Returns true is there is a public setter and it is not an indexed property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.CanWriteIndexed">
            <summary>
            Returns true is there is a public setter and it is an indexed property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.Decompose">
            <summary>
            Gets a value indicating whether to map this object's columns to the child object's properties.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.DecompositionPrefix">
            <summary>
            Gets the decomposition prefix.
            </summary>
            <value>The decomposition prefix.</value>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.IgnoreOnInsert">
            <summary>
            Gets a value indicating whether to ignore this property during insert operations.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.IgnoreOnUpdate">
            <summary>
            Gets a value indicating whether to ignore this property during update operations.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.IsIndexed">
            <summary>
            Returns true if this represents an indexed property
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.IsKey">
            <summary>
            Property implements the Key attribute.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.MappedColumnName">
            <summary>
            Column that this attribute is mapped to. Defaults to the property's name, but may be overridden by ColumnAttribute.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.Name">
            <summary>
            Public name of the property
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.PropertyChangedEventArgs">
            <summary>
            Gets a cached instance of PropertyChangedEventArgs
            </summary>
            <remarks>For indexed properties such as "Item [Int32]" the property name will be reduced to "Item[]" to match ObservableCollection.</remarks>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.PropertyChangingEventArgs">
            <summary>
            Gets a cached instance of PropertyChangingEventArgs
            </summary>
            <remarks>For indexed properties such as "Item [Int32]" the property name will be reduced to "Item[]" to match ObservableCollection.</remarks>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.Validators">
            <summary>
            List of validators that apply to the property
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadata.PropertyInfo">
            <summary>
            Cached PropertyInfo for the property.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.CreateDelegateGetter``2">
            <summary>Creates the delegate setter.</summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>Func&lt;TTarget, TProperty&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">CanRead is false for property {Name}</exception>
            <remarks>This is much faster than calling InvokeGet, but you must provide the correct TTarget and  TProperty arguments.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.CreateDelegateGetter``3">
            <summary>Creates the delegate setter for an indexed property.</summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TIndex">The type of the index parameter.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>Func&lt;TTarget, TProperty&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">CanReadIndexed is false for property {Name}</exception>
            <remarks>This is much faster than calling InvokeGet, but you must provide the correct TTarget and  TProperty arguments.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.CreateDelegateSetter``2">
            <summary>Creates the delegate setter.</summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>Action&lt;TTarget, TProperty&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">CanWrite is false for property {Name}</exception>
            <remarks>This is much faster than calling InvokeSet, but you must provide the correct TTarget and  TProperty arguments.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.CreateDelegateSetter``3">
            <summary>Creates the delegate setter for an indexed property.</summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TIndex">The type of the index parameter.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>Action&lt;TTarget, TProperty&gt;.</returns>
            <exception cref="T:System.InvalidOperationException">CanWriteIndexed is false for property {Name}</exception>
            <remarks>This is much faster than calling InvokeSet, but you must provide the correct TTarget and  TProperty arguments.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.InvokeGet(System.Object)">
            <summary>
            Invokes this property's getter on the supplied object
            </summary>
            <param name="target">The target.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentException">Error getting property " + Name</exception>
            <exception cref="T:System.InvalidOperationException">CanRead is false on property {Name}.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.InvokeGet(System.Object,System.Object)">
            <summary>
            Invokes this property's getter on the supplied object
            </summary>
            <param name="target">The target.</param>
            <param name="index">The index.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentException">Error getting property " + Name</exception>
            <exception cref="T:System.InvalidOperationException">CanReadIndexed is false on property {Name}.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.InvokeSet(System.Object,System.Object)">
            <summary>
            Invokes this property's setter on the supplied object
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentException">Error setting property " + Name</exception>
            <exception cref="T:System.InvalidOperationException">CanWrite is false for property {Name}</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.InvokeSet(System.Object,System.Object,System.Object)">
            <summary>
            Invokes this property's setter on the supplied object
            </summary>
            <param name="target">The target.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentException">Error setting property " + Name</exception>
            <exception cref="T:System.InvalidOperationException">CanWriteIndexed is false for property {Name}</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadata.AddCalculatedField(Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Adds a property to the list of calculated values watching this property.
            </summary>
            <param name="affectedProperty"></param>
        </member>
        <member name="T:Tortuga.Anchor.Metadata.PropertyMetadataCollection">
            <summary>
            Immutable collection of PropertyMetadata
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Metadata.PropertyMetadataCollection.m_QuickList">
            <summary>
            This is used when we need to iterate over all of the properties as quickly as possible.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadataCollection.Count">
            <summary>
            Returns the number of known properties
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadataCollection.PropertyNames">
            <summary>
            Returns a copy of the list of known property names.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadataCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tortuga.Anchor.Metadata.PropertyMetadata"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>PropertyMetadata.</returns>
        </member>
        <member name="P:Tortuga.Anchor.Metadata.PropertyMetadataCollection.Item(System.String)">
            <summary>
            Attempts to fetch property metadata for the indicated property. Will throw an error if not found.
            </summary>
            <param name="propertyName">
            Case insensitive property name.
            For indexed properties the parameter types should appear inside brackets. For example, "Item [Int32]".
            Note: "Item[]" will be mapped to "Item [Int32]"
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadataCollection.Contains(Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Returns true if the property is known
            </summary>
            <param name="item">item to look for</param>
            <returns><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadataCollection.Contains(System.String)">
            <summary>
            Returns true if the property is known
            </summary>
            <param name="propertyName">case insensitive property name</param>
            <returns><c>true</c> if contains the specified property name; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadataCollection.CopyTo(Tortuga.Anchor.Metadata.PropertyMetadata[],System.Int32)">
            <summary>
            Copies the collection elements to an existing array
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex</exception>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Metadata.PropertyMetadataCollection.TryGetValue(System.String,Tortuga.Anchor.Metadata.PropertyMetadata@)">
            <summary>
            Attempts to fetch property metadata for the indicated property. Will not throw an error if not found.
            </summary>
            <param name="propertyName">case insensitive property name</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">propertyName</exception>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.AbstractModelBase">
            <summary>
            Abstract base class to deal with the limitations of generics. This is not meant to be used directly by client code.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Modeling.Internals.AbstractModelBase"/> class.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.ErrorsChanged">
            <summary>
            Raised when the errors collection has changed.
            </summary>
            <remarks>
            This may be fired even when no actual change has occurred.
            </remarks>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.AddHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Adds a weak event handler.
            </summary>
            <param name="eventHandler"></param>
            <exception cref="T:System.ArgumentNullException">eventHandler;eventHandler is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.RemoveHandler(Tortuga.Anchor.Eventing.IListener{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Removes a weak event handler.
            </summary>
            <param name="eventHandler"></param>
            <exception cref="T:System.ArgumentNullException">eventHandler;eventHandler is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.InvokePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.Validate">
            <summary>
            This forces the object to be completely revalidated.
            </summary>
            <returns>
            True if the object has no errors
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.OnValidateObject(Tortuga.Anchor.DataAnnotations.ValidationResultCollection)">
            <summary>
            Override this method to add imperative validation at the object level.
            </summary>
            <param name="results">A collection of the declarative validation errors. You may add and remove errors from this collection.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.OnValidateProperty(System.String,Tortuga.Anchor.DataAnnotations.ValidationResultCollection)">
            <summary>
            Override this method to add imperative validation at the property level.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="results">A collection of the declarative validation errors. You may add and remove errors from this collection.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.ClearErrors">
            <summary>
            Clears the error collections and the HasErrors property
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.HasErrors">
            <summary>
            Returns True if there are any errors.
            </summary>
            <value>
              <c>true</c> if there are errors; otherwise, <c>false</c>.
            </value>
            <remarks>
            Call Validate() to refresh this property
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.GetAllErrors">
            <summary>
            Returns a collection of all errors (object and property level).
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.GetErrors">
            <summary>
            Returns a collection of object-level errors.
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.GetErrors(System.String)">
            <summary>
            Returns a collection of property-level errors.
            </summary>
            <param name="propertyName">Null or String.Empty will return the object-level errors</param>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.OnErrorsChanged(System.String,Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType)">
            <summary>
            Invoke this method to signal the events associated with changing the errors dictionary. The parameter updateType is returned by the methods on ErrorsDictionary.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="updateType">Type of the update.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.OnErrorsChanged(System.String)">
            <summary>
            Used to manually invoke the ErrorsChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Returns the errors associated with the object. Does not include property level errors.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelBase.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Returns the errors associated with a specific property
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1">
            <summary>
            A base class for models and entities. This is not meant to be used directly by client code.
            </summary>
            <typeparam name="TPropertyTracking">The type of property tracking desired.</typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.#ctor">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking.
            </summary>
            <remarks>Requires TPropertyTracking have a public constructor that accepts an Object</remarks>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Properties">
            <summary>
            Returns the underlying property bag
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.System#ComponentModel#INotifyDataErrorInfo#GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or <see cref="F:System.String.Empty" />, to retrieve entity-level errors.</param>
            <returns>
            The validation errors for the property or entity.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Set``1(``0,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="propertyChanged">A property changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyName;propertyName is null
            or
            propertyChanged;propertyChanged is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Validate">
            <summary>
            This forces the object to be completely revalidated.
            </summary>
            <returns>
            True if the object has no errors
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Get``1(System.String)">
            <summary>
            Fetches a value, returning Default(T) if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.GetDefault``1(``0,System.String)">
            <summary>
            Fetches a value, using the default value it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="defaultValue">Default value to use</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.GetNew``1(System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type that has a parameterless constructor</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Executing the constructor will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.GetNew(System.String)">
            <summary>
            Fetches a string value, returning String.Empty if it doesn't exist.
            </summary>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            This is a special care for strings, as we usually don't want them to default to null. This is the equivalent of calling GetDefault<string>("", propertyName) </string>
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.GetNew``1(System.Func{``0},System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="creationFunction">Function to execute if the property doesn't already exist.</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            creationFunction;creationFunction is null.
            or
            propertyName;propertyName is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Executing the default function will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.OnPropertyChanged(System.String)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.OnPropertyChanging(System.String)">
            <summary>
            Triggers the PropertyChanging event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Set``1(``0,Tortuga.Anchor.Modeling.ValueChanged{``0},System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="valueChanged">Delegate that will be invoked if the value of this property changes.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns>
            True is the value actually changed.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is null or empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Set(System.Object,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns>
            True is the value actually changed.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is null or empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelBase`1.Set``1(``0,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="collectionChanged">A collection changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null
            or
            collectionChanged;collectionChanged is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2">
            <summary>
            A base class for collections of models and entities. This is not meant to be used directly by client code.
            </summary>
            <typeparam name="T">The type of object being stored</typeparam>
            <typeparam name="TPropertyTracking">The type of property tracking desired.</typeparam>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.ErrorsChanged">
            <summary>
            Raised when the the errors collection has changed.
            </summary>
            <remarks>
            This may be fired even when no actual change has occurred.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.#ctor">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking.
            </summary>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied list
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied collection
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.HasErrors">
            <summary>
            Returns True if there are any errors.
            </summary>
            <value>
              <c>true</c> if there are any errors; otherwise, <c>false</c>.
            </value>
            <remarks>
            Call Validate() to refresh this property
            </remarks>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Properties">
            <summary>
            Returns the underlying property bag
            </summary>
            <value>
            The property bag.
            </value>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetAllErrors">
            <summary>
            Returns a collection of all errors (object and property level).
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetErrors">
            <summary>
            Returns a collection of object-level errors.
            </summary>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetErrors(System.String)">
            <summary>
            Returns a collection of property-level errors.
            </summary>
            <param name="propertyName">Null or String.Empty will return the object-level errors</param>
            <returns></returns>
            <remarks>
            Call Validate() to refresh this property.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.OnErrorsChanged(System.String,Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType)">
            <summary>
            Invoke this method to signal the events associated with changing the errors dictionary. The parameter updateType is returned by the methods on ErrorsDictionary.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="updateType">Type of the update.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.OnErrorsChanged(System.String)">
            <summary>
            Used to manually invoke the ErrorsChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.OnValidateObject(Tortuga.Anchor.DataAnnotations.ValidationResultCollection)">
            <summary>
            Override this method to add imperative validation at the object level.
            </summary>
            <param name="results">A collection of the declarative validation errors. You may add and remove errors from this collection.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.OnValidateProperty(System.String,Tortuga.Anchor.DataAnnotations.ValidationResultCollection)">
            <summary>
            Override this method to add imperative validation at the property level.
            </summary>
            <param name="propertyName">The name of the property being validated.</param>
            <param name="results">A collection of the declarative validation errors. You may add and remove errors from this collection.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Validate">
            <summary>
            This forces the object to be completely revalidated.
            </summary>
            <returns>
            True if the object has no errors
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.ClearErrors">
            <summary>
            Clears the error collections and the HasErrors property
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetNew``1(System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="TValue">Expected type that has a parameterless constructor</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Executing the constructor will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetNew``1(System.Func{``0},System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="TValue">Expected type</typeparam>
            <param name="creationFunction">Function to execute if the property doesn't already exist.</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            creationFunction;creationFunction is null.
            or
            propertyName;propertyName is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Executing the default function will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetNew(System.String)">
            <summary>
            Fetches a string value, returning String.Empty if it doesn't exist.
            </summary>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            This is a special care for strings, as we usually don't want them to default to null. This is the equivalent of calling GetDefault<string>("", propertyName) </string>
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.GetDefault``1(``0,System.String)">
            <summary>
            Fetches a value, using the default value it if it doesn't exist.
            </summary>
            <typeparam name="TValue">Expected type</typeparam>
            <param name="defaultValue">Default value to use</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Get``1(System.String)">
            <summary>
            Fetches a value, returning Default(TValue) if it doesn't exist.
            </summary>
            <typeparam name="TValue">Expected type</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Set(System.Object,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is null or empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Set``1(``0,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="propertyChanged">A property changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyName;propertyName is null
            or
            propertyChanged;propertyChanged is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.Set``1(``0,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="collectionChanged">A collection changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null
            or
            collectionChanged;collectionChanged is null.</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.ErrorsDictionary">
            <summary>
            Gets the errors dictionary.
            </summary>
            <value>
            The errors dictionary.
            </value>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.System#ComponentModel#INotifyDataErrorInfo#GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or <see cref="F:System.String.Empty" />, to retrieve entity-level errors.</param>
            <returns>
            The validation errors for the property or entity.
            </returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.AbstractModelCollection`2.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the error message for the property with the given name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag">
            <summary>
            Property bag with basic change tracking capabilities.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.#ctor(System.Object)">
            <summary>
            Property bag with basic change tracking capabilities.
            </summary>
            <param name="owner">Owning model, used to fetch metadata</param>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.IsChangedLocal">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does not walk the object graph.
            </summary>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; otherwise, false.</returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.Values">
            <summary>
            Access to the values dictionary for sub-classes. Extreme care must be taken when working this dictionary directly, as events will not be automatically fired.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.AcceptChanges(System.Boolean)">
            <summary>
            Marks all fields as unchanged by storing them in the original values collection.
            </summary>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.ChangedProperties">
            <summary>Implementors need to override this to return the indicated value.</summary>
            <returns>The indicated value or System.Reflection.Missing if the value isn't defined.</returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.GetPreviousValue(System.String)">
            <summary>
            Gets the previous value for the indicated property.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.GetValue(System.String)">
            <summary>Implementors need to override this to return the indicated value.</summary>
            <param name="propertyName">Name of the property to fetch.</param>
            <returns>The indicated value or System.Reflection.Missing if the value isn't defined.</returns>
            <exception cref="T:System.ArgumentException">propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.IsChangedGraph">
            <summary>
            Determines whether any objects have unsaved changed in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.IsDefined(System.String)">
            <summary>
            This property indicates whether or not the associated property was created.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.RejectChanges(System.Boolean)">
            <summary>
            Replaces the current values collection with the original values collection.
            </summary>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ChangeTrackingPropertyBag.Set(System.Object,Tortuga.Anchor.Modeling.Internals.PropertySetModes,System.String,System.Object@)">
            <summary>
            Implementors need to override this to save the indicated value.
            </summary>
            <param name="value">The value to be saved. A null will set the value to null.</param>
            <param name="mode">Indicates special handling for the action.</param>
            <param name="propertyName">Name of property to update</param>
            <param name="oldValue">The previously stored value. If the property was uninitialized, this will return NotSet.Value</param>
            <returns>
            True if the value actually changed
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            This will create the property if it doesn't already exist
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.CommonProperties">
            <summary>
            These are used for property changed notifications so that new objects don't need to be allocated.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.CommonProperties.Empty">
            <summary>
            Used to indicate that many or all properties have been changed.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.CommonProperties.HasErrorsProperty">
            <summary>
            The "HasErrors" property
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.CommonProperties.IsChangedProperty">
            <summary>
            The "IsChanged" property
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag">
            <summary>
            Property bag with two-level change tracking capabilities.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.#ctor(System.Object)">
            <summary>
            Property bag with two-level change tracking capabilities.
            </summary>
            <param name="owner">Owning model, used to fetch metadata</param>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.IsEditing">
            <summary>
            Currently editing
            </summary>
            <value>
              <c>true</c> if the object is in editing mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.BlockReentrant">
            <summary>
            Used to prevent reentrant calls to Begin/End/Cancel Edit
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.AcceptChanges(System.Boolean)">
            <summary>
            Marks all fields as unchanged by storing them in the original values collection.
            </summary>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <remarks>
            Calling this ends all pending edits.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.BeginEdit">
            <summary>
            This creates a checkpoint using the current values. The checkpoint remains available until EndEdit or CancelEdit is called.
            </summary>
            <exception cref="T:System.InvalidOperationException">Reentrant call to BeginEdit detected</exception>
            <remarks>
            Calling this method multiple times will have no effect.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.CancelEdit">
            <summary>
            This reverts all changes to the checkpoint values. CancelEdit is called recursively on any value in the original list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Reentrant call to CancelEdit detected</exception>
            <remarks>
            Calling this when there are no matching BeginEdit will have no effect.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.EndEdit">
            <summary>
            This removed one level of checkpoint values.
            EndEdit is called recursively on any value in the list of checkpoint values.
            </summary>
            <exception cref="T:System.InvalidOperationException">Reentrant call to EndEdit detected</exception>
            <remarks>
            Calling this when there are no matching BeginEdit will have no effect.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.EditableObjectPropertyBag.RejectChanges(System.Boolean)">
            <summary>
            Replaces the current values collection with the original values collection.
            </summary>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <remarks>
            Calling this cancels all pending edits.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ErrorsDictionary.Clear">
            <summary>
            Clears all errors
            </summary>
            <returns>
            Returns True if this actually removed any errors from the collection.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ErrorsDictionary.GetAllErrors">
            <summary>
            Gets all of the errors.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ErrorsDictionary.SetErrors(System.String,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Sets the errors at the property level
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ErrorsDictionary.SetErrors(System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Set the errors at the object level
            </summary>
            <param name="errors">The errors.</param>
            <param name="affectedProperties">The affected properties.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ErrorsDictionary.GetErrors(System.String)">
            <summary>
            Determines whether this instance has errors.
            </summary>
            <returns></returns>
            <summary>
            Gets the errors for a given property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType">
            <summary>
            This is used to indicate whether or not the errors collection was actually updated.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType.NoChange">
            <summary>
            The no changes detected
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType.HasErrorsIsTrue">
            <summary>
            The <c>HasErrors</c> property has been changed to true
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType.HasErrorsIsFalse">
            <summary>
            The <c>HasErrors</c> property has been changed to false
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.ErrorsDictionaryUpdateType.ErrorsChanged">
            <summary>
            One or more errors changed
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.NotSet">
            <summary>
            Indicates a property was never set;
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.NotSet.Value">
            <summary>
            Indicates a property was never set;
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.PropertyBag">
            <summary>
            This is the simplest implementation of PropertyBagBase. It supports normal property-change notifications and validation events.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBag.#ctor(System.Object)">
            <summary>
            This is the simplest implementation of PropertyBagBase. It supports normal property-change notifications and validation events.
            </summary>
            <param name="owner">Pass-through to PropertyBagBase</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBag.GetValue(System.String)">
            <summary>
            Implementors need to override this to return the indicated value.
            </summary>
            <param name="propertyName">Name of the property to fetch.</param>
            <returns>
            The indicated value or System.Reflection.Missing if the value isn't defined.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBag.IsDefined(System.String)">
            <summary>
            This property indicates whether or not the associated property was created.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBag.Set(System.Object,Tortuga.Anchor.Modeling.Internals.PropertySetModes,System.String,System.Object@)">
            <summary>
            Implementors need to override this to save the indicated value.
            </summary>
            <param name="value">The value to be saved. A null will set the value to null. </param>
            <param name="mode">Indicates special handling for the action. Ignores SetAsOriginal.</param>
            <param name="propertyName">Name of property to update</param>
            <param name="oldValue">The previously stored value. If the property was uninitialized, this will return NotSet.Value</param>
            <returns>
            True if the value actually changed
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <remarks>
            This will create the property if it doesn't already exist
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.PropertyBagBase">
            <summary>
            This is the template for a model's backing store.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.#ctor(System.Object)">
            <summary>
            This is the template for a model's backing store.
            </summary>
            <param name="owner">Owning model, used to fetch metadata</param>
            <exception cref="T:System.ArgumentNullException">owner;owner is null.</exception>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.PropertyChanged">
            <summary>
            This fires for each changed property.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.PropertyChanging">
            <summary>
            Occurs just before a property value is changed.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.RevalidateObject">
            <summary>
            This fires after one or more properties have been changed and their corresponding RevalidateProperty events have been handled.
            </summary>
        </member>
        <member name="E:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.RevalidateProperty">
            <summary>
            This fires after one or more properties have been changed.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Metadata">
            <summary>
            Cached metadata for the associated model.
            </summary>
            <value>
            The metadata for the associated model.
            </value>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Get``1(System.String)">
            <summary>
            Fetches a value, returning Default(T) if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty;propertyName</exception>
            <exception cref="T:System.InvalidOperationException">Property  + propertyName +  contains a null</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.GetDefault``1(``0,System.String)">
            <summary>
            Fetches a value, using the default value it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="defaultValue">Default value to use</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty;propertyName</exception>
            <exception cref="T:System.InvalidOperationException">Property  + propertyName +  contains a null</exception>
            <remarks>
            Storing the default value will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.GetNew``1(System.Func{``0},System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type</typeparam>
            <param name="creationFunction">Function to execute if the property doesn't already exist.</param>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            creationFunction;creationFunction is null.
            or
            propertyName;propertyName is null
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
            <exception cref="T:System.InvalidOperationException">Property  + propertyName +  contains a null</exception>
            <remarks>
            Executing the default function will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.GetNew``1(System.String)">
            <summary>
            Fetches a value, creating it if it doesn't exist.
            </summary>
            <typeparam name="T">Expected type that has a parameterless constructor</typeparam>
            <param name="propertyName">Case-sensitive property name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty;propertyName</exception>
            <exception cref="T:System.InvalidOperationException">Property  + propertyName +  contains a null</exception>
            <remarks>
            Executing the constructor will trigger validation but not a property-changed event.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.GetValue(System.String)">
            <summary>
            Implementors need to override this to return the indicated value.
            </summary>
            <param name="propertyName">Name of the property to fetch.</param>
            <returns>
            The indicated value or System.Reflection.Missing if the value isn't defined.
            </returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.IsDefined(System.String)">
            <summary>
            This property indicates whether or not the associated property was created.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.RevalidateAll">
            <summary>
            Uses the property metadata to trigger validation on all model properties. Then requests validation on the object itself.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set(System.Object,Tortuga.Anchor.Modeling.Internals.PropertySetModes,System.String,System.Object@)">
            <summary>
            Implementors need to override this to save the indicated value.
            </summary>
            <param name="value">The value to be saved. A null will set the value to null.</param>
            <param name="mode">Indicates special handling for the action.</param>
            <param name="propertyName">Name of property to update</param>
            <param name="oldValue">The previously stored value. If the property was uninitialized, this will return NotSet.Value</param>
            <returns>
            True if the value actually changed
            </returns>
            <remarks>
            This will create the property if it doesn't already exist
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set(System.Object,Tortuga.Anchor.Modeling.Internals.PropertySetModes,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="mode">Indicates special handling for the action.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set(System.Object,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set``1(``0,Tortuga.Anchor.Modeling.ValueChanged{``0},System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <param name="value">Value to be saved.</param>
            <param name="valueChanged">Delegate that will be invoked if the value of this property changes.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName;propertyName is null</exception>
            <exception cref="T:System.ArgumentException">valueChanged is empty.;valueChanged</exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set``1(``0,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="propertyChanged">A property changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyName;propertyName is null
            or
            propertyChanged;propertyChanged is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.Set``1(``0,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.String)">
            <summary>
            Set the indicated property to the value.
            If the value doesn't match the previous value, or if there is no previous value, raise a property changed notification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be saved.</param>
            <param name="collectionChanged">A collection changed event handler to be attached to the new value. If an old value exists, the event handler will be removed from it.</param>
            <param name="propertyName">Name of property to be created/updated</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            propertyName;propertyName is null
            or
            collectionChanged;collectionChanged is null.
            </exception>
            <exception cref="T:System.ArgumentException">propertyName is empty.;propertyName</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnPropertyChanged(Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.ArgumentNullException">property;property is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnPropertyChanged(System.String)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnPropertyChanging(Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Triggers the PropertyChanging event.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.ArgumentNullException">property;property is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnPropertyChanging(System.String)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnRevalidateObject">
            <summary>
            Triggers the RevalidateObject event.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.PropertyBagBase.OnRevalidateProperty(Tortuga.Anchor.Metadata.PropertyMetadata)">
            <summary>
            Triggers the RevalidateProperty event.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.ArgumentNullException">property;property is null.</exception>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.PropertySetModes">
            <summary>
            Used to indicate what special behaviors are needed when setting a value in PropertyBagBase.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.None">
            <summary>
            No special effects or events.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.RaiseChangedEvent">
            <summary>
            Causes the model to raise its property changed event
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.SetAsOriginal">
            <summary>
            For property bags that support it, treat the new value as the original, unchanged value. Primarily used for lazy-loading properties.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.ValidateProperty">
            <summary>
            Causes the model to revalidate the indicated property.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.ValidateObject">
            <summary>
            Causes the model to revalidate the object. Property-level validators are not run.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.FixCasing">
            <summary>
            The property name may have the wrong casing or otherwise need to be mapped.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.PropertySetModes.UpdateIsChangedProperty">
            <summary>
            Causes the model to update its IsChanged and IsChangedLocal properties
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.Internals.ValidationResultEqualityComparer">
            <summary>
            Used to compare ValidationResults
            </summary>
            <remarks>
            This does not properly support subclasses
            </remarks>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.Internals.ValidationResultEqualityComparer.Default">
            <summary>
            Returns the default instance of the comparer.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ValidationResultEqualityComparer.Equals(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Performs a value comparison by looking at the error message and member names
            </summary>
            <param name="x">The first object of to compare.</param>
            <param name="y">The second object of to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <remarks>
            WARNING: The result of Equals can change! It is based on ValidationResult, which unfortunately isn't immutable.
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.Internals.ValidationResultEqualityComparer.GetHashCode(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Returns a hash code derived from the error message.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
            <remarks>
            WARNING: The result of GetHashCode can change! It is based on ValidationResult, which unfortunately isn't immutable.
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.CalculatedFieldAttribute">
            <summary>
            Apply this attribute to indicate which properties affect this calculated property.
            Classes that inherit from ModelBase will use this information to automatically throw the appropriate property changed events.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.CalculatedFieldAttribute.#ctor(System.String)">
            <summary>
            Apply this attribute to indicate which properties affect this calculated property.
            Classes that inherit from ModelBase will use this information to automatically throw the appropriate property changed events.
            </summary>
            <param name="sources">Comma separated list of properties that, when changed, invalidate this property. Whitespace will be trimmed.</param>
            <exception cref="T:System.ArgumentException">sources</exception>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.CalculatedFieldAttribute.SourceProperties">
            <summary>
            List of properties that, when changed, invalidate this property
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.CalculatedFieldAttribute.Sources">
            <summary>
            Comma separated list of properties that, when changed, invalidate this property
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.ChangeTrackingModelBase">
            <summary>
            This ModelBase tracks which fields have changed since the last time AcceptChanges or RejectChanges was called. The purpose of this ModelBase is to easy to determine which objects have unsaved changes.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.#ctor">
            <summary>
            This ModelBase tracks which fields have changed since the last time Checkpoint or Revert was called.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.IsChanged">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does walks the object graph for changes in child objects as well.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.IsChangedLocal">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does not walk the object graph.
            </summary>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; otherwise, false.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.AcceptChanges">
            <summary>
            Marks all fields as unchanged and clears the IsChanged flag.
            </summary>
            <remarks>
            This will call AcceptChanges on properties that implement IChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.ChangedProperties">
            <summary>
            List of changed properties.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.GetPreviousValue(System.String)">
            <summary>
            Gets the previous value for the indicated property.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.RejectChanges">
            <summary>
            Discards all pending changes and reverts to the values used the last time AcceptChanges was called.
            </summary>
            <remarks>
            This will call RejectChanges on properties that implement IRevertibleChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>Called after the object is deserialized.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1">
            <summary>
            A collection that supports revertible change tracking.
            </summary>
            <typeparam name="TModelType"></typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.#ctor">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking.
            </summary>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied collection
            </summary>
            <param name="list">The list from which the elements are copied.</param>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied collection
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.IsChanged">
            <summary>
            Walk the object graph, looking for changed items in properties and the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.IsChangedLocal">
            <summary>
            Returns True if any fields were modified since the last call to Checkpoint. This also checks items that implement IChangeTracking.
            </summary>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; otherwise, false.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.AcceptChanges">
            <summary>
            Marks all fields as unchanged and clears the IsChanged flag.
            </summary>
            <remarks>
            This will call AcceptChanges on properties and collection items that implement IChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.RejectChanges">
            <summary>
            Discards all pending changes and reverts to the values used the last time AcceptChanges was called.
            </summary>
            <remarks>
            This will call RejectChanges on properties and collection items from the original collection that implement IRevertibleChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ChangeTrackingModelCollection`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>Called after the object is deserialized.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.DecomposeAttribute">
            <summary>
            The Decompose attribute indicates that property is complex and its child properties should be treated as part of the parent object.
            </summary>
            <remarks>The optional prefix attribute can be used to match with result set column names.</remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Tortuga.Anchor.Modeling.DecomposeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Modeling.DecomposeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.DecomposeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Modeling.DecomposeAttribute"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.DecomposeAttribute.Prefix">
            <summary>
            Gets the prefix used in the result set columns.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.EditableObjectModelBase">
            <summary>
            This ModelBase adds the IEditableObject interface to the ChangeTrackingModelBase. The IEditableObject methods are designed for dialogs with ok/cancel semantics. Use the IChangeTracking to track unsaved changes.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.Modeling.EditableObjectModelBase"/> class.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.EditableObjectModelBase.IsChanged">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does walks the object graph for changes in child objects as well.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.EditableObjectModelBase.IsChangedLocal">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does not walk the object graph.
            </summary>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; otherwise, false.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.AcceptChanges">
            <summary>
            Marks all fields as unchanged and clears the IsChanged flag.
            </summary>
            <remarks>
            This will call AcceptChanges on properties that implement IChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> call.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.ChangedProperties">
            <summary>
            List of changed properties.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> or <see cref="M:System.ComponentModel.IBindingList.AddNew" /> call into the underlying object.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.GetPreviousValue(System.String)">
            <summary>
            Gets the previous value for the indicated property.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelBase.RejectChanges">
            <summary>
            Discards all pending changes and reverts to the values used the last time AcceptChanges was called.
            </summary>
            <remarks>
            This will call RejectChanges on properties that implement IRevertibleChangeTracking
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1">
            <summary>
            A collection suitable for use in dialogs that have a cancel button. This also supports revertible change tracking.
            </summary>
            <typeparam name="TModelType"></typeparam>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.#ctor">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking.
            </summary>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied collection
            </summary>
            <param name="list">The list from which the elements are copied.</param>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a model by auto-constructing the property bag defined by TPropertyTracking and populates it using the supplied collection
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <remarks>
            Requires TPropertyTracking have a public constructor that accepts an Object
            </remarks>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.IsChanged">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does walks the object graph for changes in child objects as well.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.IsChangedLocal">
            <summary>
            Returns True if any fields were modified since the last call to AcceptChanges. This does not walk the object graph.
            </summary>
            <returns>true if the object’s content has changed since the last call to <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; otherwise, false.</returns>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.AcceptChanges">
            <summary>
            Marks all fields as unchanged and clears the IsChanged flag.
            </summary>
            <remarks>
            This will call AcceptChanges on properties and collection items that implement IChangeTracking
            </remarks>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> call.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> or <see cref="M:System.ComponentModel.IBindingList.AddNew" /> call into the underlying object.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.EditableObjectModelCollection`1.RejectChanges">
            <summary>
            Discards all pending changes and reverts to the values used the last time AcceptChanges was called.
            </summary>
            <remarks>
            This will call RejectChanges on properties and collection items from the original collection that implement IRevertibleChangeTracking
            </remarks>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.IgnoreOnInsertAttribute">
            <summary>
            This indicates that the property shouldn't be included in insert operations.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Tortuga.Anchor.Modeling.IgnoreOnUpdateAttribute">
            <summary>
            This indicates that the property shouldn't be included in update operations.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Tortuga.Anchor.Modeling.ModelBase">
            <summary>
            ModelBase using the default property bag implementation.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ModelBase.#ctor">
            <summary>
            Creates a model using the default property bag implementation..
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.ModelCollection`1">
            <summary>
            ModelCollection using the default property bag implementation.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ModelCollection`1.#ctor">
            <summary>
            Creates a model collection using the default property bag implementation..
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ModelCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a model collection using the default property bag implementation..
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:Tortuga.Anchor.Modeling.ModelCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a model collection using the default property bag implementation..
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.UpdateMode">
            <summary>
            This enumeration is used to indicate how AcceptChanges calls will be propagated
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.UpdateMode.None">
            <summary>
            Do not mark changes as accepted
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.UpdateMode.AcceptChanges">
            <summary>
            Recursively mark changes as accepted
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.Modeling.UpdateMode.AcceptLocalChanges">
            <summary>
            Mark changes as accepted, but not on child objects
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.Modeling.ValueChanged`1">
            <summary>
            Delegate for the ValueChanged action used in the Set method.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="oldValue">Previous value of the property.</param>
            <param name="newValue">Current value of the property</param>
        </member>
        <member name="T:Tortuga.Anchor.RandomExtended">
            <summary>
            An extended version of the Random class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.RandomExtended"/> class.
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tortuga.Anchor.RandomExtended"/> class.
            </summary>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.Choose``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Choose one item from the list, leaving the original list unaltered.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list;list is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.Choose``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Boolean)">
            <summary>
            Choose count items from the list, leaving the original list unaltered.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="count">The count.</param>
            <param name="allowDuplicates">if set to <c>true</c> is the same item can be picked multiple times.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list;list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count;count must be greater than or equal to zero
            or
            count;count must be less than or equal to list.Count if allowDuplicates is false
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDateTime(System.DateTime,System.DateTime)">
            <summary>
            Returns a random date/time that is within the indicated time span.
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to minValue.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDateTime(System.DateTime,System.TimeSpan)">
            <summary>
            Returns a random date/time that is within the indicated time span.
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxSpan">The exclusive maximum span.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDateTimeOffset(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Returns a random date/time that is within the indicated time span.
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxSpan">The exclusive maximum span.</param>
            <returns></returns>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDateTimeOffset(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns a random date/time that is within the indicated range.
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to minValue.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDecimal(System.Decimal)">
            <summary>
            Returns a random decimal that is less than maxValue
            </summary>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to 0.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns a random decimal that is within the indicated range
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to minValue.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextInt64(System.Int64,System.Int64)">
            <summary>
            Returns a random Int64 that is within the indicated range
            </summary>
            <param name="minValue">The inclusive minimum value.</param>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to minValue.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.NextInt64(System.Int64)">
            <summary>
            Returns a random Int64 that is less than maxValue
            </summary>
            <param name="maxValue">The exclusive maximum value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue;maxValue must be greater than or equal to 0.</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.Pick``1(System.Collections.Generic.IList{``0})">
            <summary>
            Pick and remove one item from the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list;list is null.</exception>
            <exception cref="T:System.ArgumentException">List cannot be read-only;list</exception>
        </member>
        <member name="M:Tortuga.Anchor.RandomExtended.Pick``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Pick and remove count items from the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="count">The count.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list;list is null.</exception>
            <exception cref="T:System.ArgumentException">List cannot be read-only;list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count;count must be greater than or equal to zero
            or
            count;count must be less than or equal to list.Count
            </exception>
        </member>
        <member name="T:Tortuga.Anchor.StringJoinOption">
            <summary>
            String join options
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.StringJoinOption.None">
            <summary>
            Use the same behavior as string.Join
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.StringJoinOption.DiscardNulls">
            <summary>
            Nulls are skipped. This prevents two separators from appearing one after the other.
            </summary>
        </member>
        <member name="F:Tortuga.Anchor.StringJoinOption.DiscardEmptyAndNull">
            <summary>
            Nulls and empty strings are skipped. This prevents two separators from appearing one after the other.
            </summary>
        </member>
        <member name="T:Tortuga.Anchor.StringUtilities">
            <summary>
            Extension methods for String.
            </summary>
        </member>
        <member name="P:Tortuga.Anchor.StringUtilities.MaxSize">
            <summary>
            The maximum size of a string builder this will cache.
            </summary>
            <remarks>The default value is 1000. You may need to modify this based on your usage.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.AcquireStringBuilder(System.Nullable{System.Int32})">
            <summary>
            Acquires a string builder of the indicated capacity.
            </summary>
            <param name="capacity">The desired capacity. If larger than MaxSize, a new instance of StringBuilder will be returned.</param>
            <returns>StringBuilder.</returns>
            <remarks>Caching is performed on a per-thread basis.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space
            characters.</summary>
            <param name="value">The string to test</param>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space
            characters.</summary>
            <param name="value">The string to test</param>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,Tortuga.Anchor.StringJoinOption)">
            <summary>
            Joins the list of values using the specified separator and options.
            </summary>
            <param name="values">The values.</param>
            <param name="separator">The separator.</param>
            <param name="option">The option.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.Join(System.Collections.Generic.IEnumerable{System.String},System.String,Tortuga.Anchor.StringJoinOption)">
            <summary>
            Joins the list of strings using the specified separator and options.
            </summary>
            <param name="values">The values.</param>
            <param name="separator">The separator.</param>
            <param name="option">The option.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="M:Tortuga.Anchor.StringUtilities.Release(System.Text.StringBuilder)">
            <summary>
            Releases the specified string builder back to the cache.
            </summary>
            <param name="stringBuilder">The string builder to release. Once released, it can no longer be used until re-acquired.</param>
            <returns>Contents of the string builder.</returns>
            <remarks>Though not strictly required, it is preferable to release a string builder onto the same thread that acquired it.</remarks>
        </member>
        <member name="T:Tortuga.Anchor.TaskUtilities">
            <summary>
            Extension methods for working with Tasks
            </summary>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AsTask(System.Threading.CancellationToken)">
            <summary>
            Allows using a Cancellation Token as if it were a task.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that can be canceled, but never completed.</returns>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AsTask``1(System.Threading.CancellationToken)">
            <summary>Allows using a Cancellation Token as if it were a task.</summary>
            <typeparam name="T"></typeparam>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that can be canceled, but never completed.</returns>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingTask``1(System.TimeSpan)">
            <summary>
            Creates a task that automatically cancels after a given delay.
            </summary>
            <typeparam name="T">Task type</typeparam>
            <param name="delay">The delay before the task is canceled.</param>
            <returns>Task that will be canceled.</returns>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingTask(System.TimeSpan)">
            <summary>
            Creates a task that automatically cancels after a given delay.
            </summary>
            <param name="delay">The delay before the task is canceled.</param>
            <returns>Task that will be canceled.</returns>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingTask``1(System.Int32)">
            <summary>
            Creates a task that automatically cancels after a given delay.
            </summary>
            <typeparam name="T">Task type</typeparam>
            <param name="delay">The delay, in milliseconds, before the task is canceled.</param>
            <returns>Task that will be canceled.</returns>
            <remarks>Use Task.Delay if a result isn't needed.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingTask(System.Int32)">
            <summary>
            Creates a task that automatically cancels after a given delay.
            </summary>
            <param name="delay">The delay, in milliseconds, before the task is canceled.</param>
            <returns>Task that will be canceled.</returns>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingToken(System.TimeSpan)">
            <summary>
            Automatically cancels a CancellationToken after the indicated amount of time.
            </summary>
            <param name="delay">The delay before the token is canceled.</param>
            <returns>CancellationToken.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">delay</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCancelingToken(System.Int32)">
            <summary>
            Automatically cancels a CancellationToken after the indicated amount of time in milliseconds.
            </summary>
            <param name="millisecondsDelay">The delay in milliseconds before the token is canceled.</param>
            <returns>CancellationToken.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">delay</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCompletingTask``1(``0,System.TimeSpan)">
            <summary>
            Creates a task that automatically completes after a given delay.
            </summary>
            <typeparam name="T">Task type</typeparam>
            <param name="result">The result to be given to the task.</param>
            <param name="delay">The delay before the task is completed.</param>
            <returns>Task that will be completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">delay</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.AutoCompletingTask``1(``0,System.Int32)">
            <summary>
            Creates a task that automatically completes after a given delay.
            </summary>
            <typeparam name="T">Task type</typeparam>
            <param name="result">The result to be given to the task.</param>
            <param name="delay">The delay, in milliseconds, before the task is completed.</param>
            <returns>Task that will be completed.</returns>
            <remarks>Use Task.Delay if a result isn't needed.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.DelaySafe(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a cancellable task that completes after a specified time interval. This will not throw an exception if the cancellationToken is triggered or disposed.
            </summary>
            <param name="delay">The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the time delay.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The millisecondsDelay argument is less than -1.</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.DelaySafe(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a cancellable task that completes after a specified number of milliseconds. This will not throw an exception if the cancellationToken is triggered or disposed.
            </summary>
            <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
            </param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>A task that represents the time delay.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The millisecondsDelay argument is less than -1.</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.ForEachAsync(System.Collections.Generic.IReadOnlyCollection{System.Func{System.Threading.Tasks.Task}})">
            <summary>
            Runs each action in parallel.
            </summary>
            <param name="actions">The actions.</param>
            <returns>A Task that is completed when all actions are complete</returns>
            <exception cref="T:System.ArgumentNullException">actions</exception>
            <exception cref="T:System.ArgumentException">actions</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.ForEachAsync``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            In parallel, performs the same asynchronous action on each element in the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list of input values to be passed to the action.</param>
            <param name="action">The action to be performed on each element in the list.</param>
            <returns>A Task that is completed when all actions are complete</returns>
            <exception cref="T:System.ArgumentNullException">
            list
            or
            action
            </exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.RunConcurrently(System.Threading.Tasks.Task)">
            <summary>
            Runs the Task in a concurrent thread without waiting for it to complete. This will start the task if it is not already running.
            </summary>
            <param name="task">The task to run.</param>
            <exception cref="T:System.ArgumentNullException">task</exception>
            <remarks>This is usually used to avoid warning messages about not waiting for the task to complete.</remarks>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.WaitForCompleteOrCancel(System.Threading.Tasks.Task)">
            <summary>
            Wait for the indicated task to be completed or canceled.
            </summary>
            <param name="task">The task.</param>
            <returns><c>true</c> if the task ran to completion, <c>false</c> if the task was canceled.</returns>
            <exception cref="T:System.ArgumentNullException">task;task is null.</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            A version of Task.WhenAll that can be canceled.
            </summary>
            <param name="tasks">The tasks to wait for.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Task.WhenAll as an extension method.
            </summary>
            <param name="tasks">The tasks to wait for.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">tasks</exception>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            A version of Task.WhenAny that can be canceled.
            </summary>
            <param name="tasks">The tasks to wait for.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Tortuga.Anchor.TaskUtilities.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            A version of Task.WhenAll that can be canceled.
            </summary>
            <param name="tasks">The tasks to wait for.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">tasks</exception>
        </member>
    </members>
</doc>
